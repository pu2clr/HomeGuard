"""
Mock Hardware - Simulador dos m√≥dulos ESP32 para teste local
=============================================================

Este arquivo simula os m√≥dulos machine, network e umqtt para 
permitir execu√ß√£o local do c√≥digo MicroPython do ESP32.

Uso:
    python3 simulate_esp32.py
    ou
    micropython simulate_esp32.py
"""

import time
import random
import json
import sys
from typing import Optional, Callable, Any

# =============================================================================
# MOCK DO M√ìDULO MACHINE
# =============================================================================

class MockPin:
    """Simula machine.Pin do ESP32"""
    
    OUT = 1
    IN = 0
    
    def __init__(self, pin: int, mode: Optional[int] = None):
        self.pin = pin
        self.mode = mode
        self._value = 0
        print(f"üîå GPIO{pin} configurado como {'OUTPUT' if mode == self.OUT else 'INPUT'}")
    
    def value(self, val: Optional[int] = None) -> int:
        if val is not None:
            self._value = val
            print(f"üì° GPIO{self.pin} = {val} ({'HIGH' if val else 'LOW'})")
        return self._value

class MockADC:
    """Simula machine.ADC do ESP32"""
    
    ATTN_11DB = 3
    
    def __init__(self, pin):
        self.pin = pin
        self._voltage_base = 2700  # Simula√ß√£o pr√≥xima ao seu threshold
        print(f"üìä ADC configurado no GPIO{pin.pin}")
    
    def read(self) -> int:
        """Simula leitura do sensor ZMPT101B com varia√ß√£o real√≠stica"""
        # Simular varia√ß√£o como sensor real
        variation = random.randint(-200, 200)
        noise = random.randint(-50, 50)
        reading = self._voltage_base + variation + noise
        
        # Simular mudan√ßa de estado da rede ocasionalmente
        if random.random() < 0.05:  # 5% chance de mudan√ßa
            self._voltage_base = 2400 if self._voltage_base > 2600 else 2800
            
        return max(0, min(4095, reading))  # Limitar range ADC
    
    def atten(self, attenuation):
        """Simula configura√ß√£o de atenua√ß√£o"""
        print(f"‚öôÔ∏è  ADC atenua√ß√£o configurada: {attenuation}")

class MockMachine:
    """Simula m√≥dulo machine completo"""
    
    Pin = MockPin
    ADC = MockADC
    ATTN_11DB = 3
    
    @staticmethod
    def idle():
        """Simula machine.idle() - yield para watchdog"""
        time.sleep(0.001)  # Pequeno delay para simular yield
    
    @staticmethod
    def reset():
        """Simula reset do microcontrolador"""
        print("üîÑ RESET simulado - reiniciando sistema...")
        time.sleep(1)
        # Em vez de exit(), reinicia a simula√ß√£o
        import os
        os.execv(sys.executable, ['python'] + sys.argv)
    
    @staticmethod
    def freq(freq: Optional[int] = None) -> int:
        """Simula frequ√™ncia da CPU"""
        if freq is not None:
            print(f"‚ö° CPU freq configurada: {freq} Hz")
        return 240000000  # 240MHz padr√£o ESP32

# =============================================================================
# MOCK DO M√ìDULO NETWORK
# =============================================================================

class MockWLAN:
    """Simula network.WLAN do ESP32"""
    
    STA_IF = 0
    AP_IF = 1
    
    def __init__(self, interface):
        self.interface = interface
        self._active = False
        self._connected = False
        self._config = {}
        print(f"üì∂ WLAN interface {interface} criada")
    
    def active(self, state: Optional[bool] = None) -> bool:
        if state is not None:
            self._active = state
            print(f"üì∂ WLAN {'ativada' if state else 'desativada'}")
        return self._active
    
    def connect(self, ssid: str, password: str):
        """Simula conex√£o WiFi"""
        print(f"üîó Conectando ao WiFi: {ssid}")
        time.sleep(2)  # Simular tempo de conex√£o
        self._connected = True
        print(f"‚úÖ WiFi conectado: {ssid}")
    
    def isconnected(self) -> bool:
        return self._connected
    
    def ifconfig(self) -> tuple:
        """Simula configura√ß√£o de rede"""
        if self._connected:
            return ('192.168.1.150', '255.255.255.0', '192.168.1.1', '192.168.1.1')
        return ('0.0.0.0', '0.0.0.0', '0.0.0.0', '0.0.0.0')

class MockNetwork:
    """Simula m√≥dulo network completo"""
    
    WLAN = MockWLAN
    STA_IF = 0
    AP_IF = 1

# =============================================================================
# MOCK DO M√ìDULO UMQTT
# =============================================================================

class MockMQTTClient:
    """Simula umqtt.simple.MQTTClient"""
    
    def __init__(self, client_id: str, server: str, port: int = 1883, 
                 user: Optional[str] = None, password: Optional[str] = None):
        self.client_id = client_id
        self.server = server
        self.port = port
        self.user = user
        self.password = password
        self._callback = None
        self._connected = False
        self._subscriptions = []
        print(f"üì° MQTT Client criado: {client_id}@{server}:{port}")
    
    def set_callback(self, callback: Callable):
        """Define callback para mensagens MQTT"""
        self._callback = callback
        print("üìã MQTT callback configurado")
    
    def connect(self):
        """Simula conex√£o MQTT"""
        print(f"üîó Conectando MQTT: {self.server}:{self.port}")
        time.sleep(1)  # Simular tempo de conex√£o
        self._connected = True
        print("‚úÖ MQTT conectado")
    
    def subscribe(self, topic: bytes):
        """Simula inscri√ß√£o em t√≥pico"""
        topic_str = topic.decode() if isinstance(topic, bytes) else topic
        self._subscriptions.append(topic_str)
        print(f"üì• Inscrito no t√≥pico: {topic_str}")
    
    def publish(self, topic: bytes, message: str):
        """Simula publica√ß√£o MQTT"""
        topic_str = topic.decode() if isinstance(topic, bytes) else topic
        print(f"üì§ MQTT Publish: {topic_str}")
        print(f"    Mensagem: {message}")
        
        # Simular resposta de comando ocasionalmente
        if "command" in topic_str and random.random() < 0.1:
            self._simulate_command_response()
    
    def check_msg(self):
        """Simula verifica√ß√£o de mensagens"""
        # Simular recebimento de comando ocasionalmente
        if self._callback and random.random() < 0.02:  # 2% chance
            commands = [b'STATUS', b'AUTO', b'ON', b'OFF']
            cmd = random.choice(commands)
            topic = self._subscriptions[0] if self._subscriptions else "test/command"
            print(f"üì® MQTT comando recebido simulado: {cmd.decode()}")
            self._callback(topic.encode(), cmd)
    
    def _simulate_command_response(self):
        """Simula resposta a comandos MQTT"""
        time.sleep(0.1)

class MockUMQTT:
    """Simula m√≥dulo umqtt.simple"""
    
    class simple:
        MQTTClient = MockMQTTClient

# =============================================================================
# MOCK DO M√ìDULO GC
# =============================================================================

class MockGC:
    """Simula m√≥dulo gc (garbage collector)"""
    
    @staticmethod
    def collect():
        """Simula garbage collection"""
        print("üóëÔ∏è  Garbage collection executado")
    
    @staticmethod
    def mem_free() -> int:
        """Simula mem√≥ria livre"""
        return random.randint(50000, 80000)  # Simular varia√ß√£o de mem√≥ria

# =============================================================================
# MOCK DO M√ìDULO TIME (ESTENDIDO)
# =============================================================================

class MockTime:
    """Estende m√≥dulo time com fun√ß√µes MicroPython"""
    
    @staticmethod
    def sleep_ms(ms: int):
        """Simula time.sleep_ms do MicroPython"""
        time.sleep(ms / 1000.0)
    
    @staticmethod
    def ticks_ms() -> int:
        """Simula time.ticks_ms do MicroPython"""
        return int(time.time() * 1000)
    
    @staticmethod
    def ticks_diff(end: int, start: int) -> int:
        """Simula time.ticks_diff do MicroPython"""
        return end - start
    
    # Proxies para fun√ß√µes padr√£o do time
    sleep = time.sleep
    time = time.time

# =============================================================================
# INSTALA√á√ÉO DOS MOCKS
# =============================================================================

def install_mocks():
    """Instala todos os m√≥dulos mock no sys.modules"""
    
    # Instalar mocks
    sys.modules['machine'] = MockMachine()
    sys.modules['network'] = MockNetwork()
    sys.modules['umqtt'] = MockUMQTT()
    sys.modules['umqtt.simple'] = MockUMQTT.simple()
    sys.modules['gc'] = MockGC()
    
    # Estender m√≥dulo time
    import time as original_time
    mock_time = MockTime()
    # Adicionar fun√ß√µes MicroPython ao m√≥dulo time existente
    original_time.sleep_ms = mock_time.sleep_ms
    original_time.ticks_ms = mock_time.ticks_ms
    original_time.ticks_diff = mock_time.ticks_diff
    
    print("‚úÖ M√≥dulos ESP32 simulados instalados:")
    print("   - machine (Pin, ADC, idle, reset)")
    print("   - network (WLAN, WiFi)")
    print("   - umqtt.simple (MQTTClient)")
    print("   - gc (garbage collector)")
    print("   - time (sleep_ms, ticks_ms)")
    print("")

# =============================================================================
# SIMULA√á√ÉO PRINCIPAL
# =============================================================================

def run_simulation():
    """Executa simula√ß√£o do grid monitor"""
    
    print("üöÄ INICIANDO SIMULA√á√ÉO ESP32-C3 GRID MONITOR")
    print("=" * 50)
    print("")
    
    # Instalar m√≥dulos mock
    install_mocks()
    
    # Importar e executar o c√≥digo principal
    try:
        print("üìÇ Carregando main.py...")
        
        # Executar o c√≥digo principal
        with open('main.py', 'r') as f:
            code = f.read()
        
        print("‚ñ∂Ô∏è  Executando c√≥digo principal...")
        print("-" * 50)
        
        exec(code, {'__name__': '__main__'})
        
    except FileNotFoundError:
        print("‚ùå Arquivo main.py n√£o encontrado!")
        print("   Certifique-se de estar na pasta correta:")
        print("   cd source/Micropython/grid_monitor_esp32c3")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Simula√ß√£o interrompida pelo usu√°rio")
        
    except Exception as e:
        print(f"‚ùå Erro na simula√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    run_simulation()