#!/bin/bash

# Teste de Performance: .py vs .mpy
# Analisa diferen√ßas entre c√≥digo fonte e bytecode

echo "üîç AN√ÅLISE DE ARQUIVO .MPY vs .PY"
echo "=================================="
echo ""

# Verificar se existe main.py e main.mpy
if [ ! -f "main.py" ]; then
    echo "‚ùå main.py n√£o encontrado!"
    exit 1
fi

# Gerar main.mpy se n√£o existir
if [ ! -f "main.mpy" ]; then
    echo "üì¶ Gerando main.mpy..."
    if command -v mpy-cross &> /dev/null; then
        mpy-cross main.py
    else
        echo "‚ùå mpy-cross n√£o encontrado. Instale com: pip install mpy-cross"
        exit 1
    fi
fi

echo "üìä COMPARA√á√ÉO DE ARQUIVOS:"
echo "========================="

# Tamanhos
py_size=$(wc -c < main.py)
mpy_size=$(wc -c < main.mpy)
reduction=$((100 - (mpy_size * 100 / py_size)))

echo "üìÑ main.py  : ${py_size} bytes"
echo "üì¶ main.mpy : ${mpy_size} bytes"
echo "üìâ Redu√ß√£o  : ${reduction}%"
echo ""

# Informa√ß√µes detalhadas do .mpy
echo "üîç AN√ÅLISE DETALHADA DO .MPY:"
echo "============================="

# Header do arquivo .mpy (primeiros bytes)
echo "üìã Header .mpy:"
hexdump -C main.mpy | head -3

echo ""
echo "üéØ VANTAGENS DO .MPY:"
echo "- ‚ö° Boot ${reduction}% mais r√°pido (menos c√≥digo para compilar)"
echo "- üíæ Economia de ${reduction}% de espa√ßo Flash"
echo "- üß† Menor uso de RAM (n√£o compila em runtime)"
echo "- üîí C√≥digo menos leg√≠vel (prote√ß√£o b√°sica)"
echo ""

echo "‚ö†Ô∏è  DESVANTAGENS DO .MPY:"
echo "- üîß Debug mais dif√≠cil (stack traces menos claros)"
echo "- üì± Espec√≠fico da vers√£o MicroPython atual"
echo "- üîÑ Precisa recompilar para outras vers√µes"
echo ""

echo "üöÄ RECOMENDA√á√ïES DE USO:"
echo "======================="
echo ""
echo "üì¶ USAR .MPY QUANDO:"
echo "- ‚úÖ C√≥digo em produ√ß√£o (est√°vel)"
echo "- ‚úÖ Bibliotecas grandes (sensor_calibration.py)"
echo "- ‚úÖ M√≥dulos raramente alterados"
echo "- ‚úÖ Performance cr√≠tica (boot r√°pido)"
echo ""
echo "üìÑ USAR .PY QUANDO:"
echo "- ‚úÖ Desenvolvimento ativo"
echo "- ‚úÖ Debug frequente necess√°rio"
echo "- ‚úÖ C√≥digo experimental"
echo "- ‚úÖ Portabilidade entre vers√µes MicroPython"
echo ""

echo "üéØ ESTRAT√âGIA H√çBRIDA RECOMENDADA:"
echo "=================================="
echo ""
echo "main.py              # Arquivo principal (f√°cil debug)"
echo "config.py            # Configura√ß√µes (f√°cil edi√ß√£o)"
echo "sensor_calibration.mpy   # Biblioteca grande (performance)"
echo "mqtt_handler.mpy         # M√≥dulo est√°vel (performance)"
echo ""

# Teste de compila√ß√£o para valida√ß√£o
echo "‚úÖ VALIDA√á√ÉO DE COMPILA√á√ÉO:"
echo "=========================="

if mpy-cross main.py 2>/dev/null; then
    echo "‚úÖ main.py compila corretamente para .mpy"
    
    # Verificar se outros arquivos .py podem ser compilados
    for file in *.py; do
        if [ "$file" != "main.py" ] && [ -f "$file" ]; then
            if mpy-cross "$file" 2>/dev/null; then
                mpy_file="${file%.py}.mpy"
                original_size=$(wc -c < "$file")
                compiled_size=$(wc -c < "$mpy_file")
                reduction=$((100 - (compiled_size * 100 / original_size)))
                echo "‚úÖ $file ‚Üí $mpy_file (${reduction}% menor)"
                
                # Limpar arquivo .mpy de teste
                rm -f "$mpy_file"
            else
                echo "‚ùå $file tem erros de compila√ß√£o"
            fi
        fi
    done
else
    echo "‚ùå main.py tem erros de compila√ß√£o"
fi

echo ""
echo "üìñ MAIS INFORMA√á√ïES:"
echo "==================="
echo "- MicroPython .mpy format: https://docs.micropython.org/en/latest/reference/mpyfiles.html"
echo "- Cross-compiler docs: https://docs.micropython.org/en/latest/reference/glossary.html#term-cross-compiler"
echo ""
echo "üîß COMANDOS √öTEIS:"
echo "=================="
echo "# Compilar arquivo espec√≠fico:"
echo "mpy-cross sensor_calibration.py"
echo ""
echo "# Compilar todos os .py (exceto main.py):"
echo "for f in *.py; do [ \"\$f\" != \"main.py\" ] && mpy-cross \"\$f\"; done"
echo ""
echo "# Upload mix .py + .mpy:"
echo "mpremote connect /dev/ttyUSB0 fs cp main.py sensor_calibration.mpy :"