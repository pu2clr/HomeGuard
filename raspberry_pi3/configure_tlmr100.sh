# üéØ HomeGuard + TP-Link TL-MR100 - Guia Completo

## üì° **TP-Link TL-MR100 - Especifica√ß√µes**

### ‚úÖ **Por que √© Ideal para HomeGuard:**
```yaml
Conectividade:
  ‚úÖ 4G LTE Cat 4 (at√© 150 Mbps download / 50 Mbps upload)
  ‚úÖ Fallback 3G autom√°tico
  ‚úÖ WiFi N300 (2.4 GHz)
  ‚úÖ 2 portas Ethernet (1 LAN/WAN + 1 LAN)

Recursos HomeGuard:
  ‚úÖ Port forwarding configur√°vel
  ‚úÖ QoS Traffic Control
  ‚úÖ Firewall personaliz√°vel
  ‚úÖ DDNS support
  ‚úÖ Interface web em portugu√™s

Hardware:
  ‚úÖ Antenas remov√≠veis (upgrade poss√≠vel)
  ‚úÖ Slot MicroSIM
  ‚úÖ Plug & Play
  ‚úÖ LED status (sinal, conectividade)
  ‚úÖ Alimenta√ß√£o externa (est√°vel)
```

---

## üîß **Configura√ß√£o Inicial TL-MR100**

### **1. Primeira Conex√£o:**
```bash
# O TL-MR100 cria uma rede WiFi padr√£o
SSID: TP-Link_[MAC_√∫ltimos_d√≠gitos]
Senha: Impressa na etiqueta do roteador

# Ou conectar via cabo ethernet
IP Padr√£o: 192.168.1.1
Login: admin
Senha: admin (primeira vez)
```

### **2. Acesso √† Interface Web:**
```bash
# Conectar ao WiFi ou ethernet
# Abrir navegador
http://192.168.1.1

# Login inicial
Usu√°rio: admin
Senha: admin

# Configurar nova senha (obrigat√≥rio)
Nova senha: [SUA_SENHA_FORTE]
```

### **3. Configura√ß√£o APN (Brasil):**
```yaml
Menu: Advanced ‚Üí Network ‚Üí Internet

Para Vivo:
  Profile Name: Vivo
  APN: vivo.com.br
  Username: vivo
  Password: vivo
  Authentication: PAP/CHAP
  PDP Type: IPv4

Para TIM:
  Profile Name: TIM
  APN: tim.br
  Username: tim
  Password: tim

Para Claro:
  Profile Name: Claro
  APN: claro.com.br
  Username: claro
  Password: claro

Para Oi:
  Profile Name: Oi
  APN: gprs.oi.com.br
  Username: oi
  Password: oi
```

---

## üéØ **Configura√ß√£o HomeGuard Espec√≠fica**

### **1. Port Forwarding para VPN:**
```yaml
Menu: Advanced ‚Üí NAT Forwarding ‚Üí Port Forwarding

Add New Entry:
  Service Name: HomeGuard-VPN
  Device: Custom (IP: 192.168.1.100)  # IP do Raspberry Pi
  External Port: 51820
  Internal Port: 51820
  Protocol: UDP
  Status: Enabled

Save & Apply
```

### **2. Configura√ß√£o de Firewall:**
```yaml
Menu: Advanced ‚Üí Security ‚Üí Firewall

Settings:
  SPI Firewall: Enable
  DoS Protection: Enable
  VPN Passthrough: Enable (todos)

Access Control:
  Default Policy: Deny (entrada)
  Allow: Port 51820 UDP (HomeGuard VPN)

Save & Apply
```

### **3. QoS para HomeGuard:**
```yaml
Menu: Advanced ‚Üí Advanced ‚Üí QoS

Enable QoS: ‚úì
Upload Bandwidth: [Conforme seu plano]
Download Bandwidth: [Conforme seu plano]

High Priority Rules:
  Name: HomeGuard-VPN
  Device: Raspberry Pi (192.168.1.100)
  Port: 51820
  Protocol: UDP
  Priority: High

  Name: HomeGuard-MQTT
  Device: Raspberry Pi (192.168.1.100)  
  Port: 1883
  Protocol: TCP
  Priority: High

Save & Apply
```

### **4. DDNS (Opcional mas Recomendado):**
```yaml
Menu: Advanced ‚Üí Network ‚Üí Dynamic DNS

Service Provider: No-IP / DynDNS
Domain Name: homeguard-[seunome].ddns.net
Username: [sua_conta_ddns]
Password: [senha_ddns]

Enable: ‚úì
Save & Apply
```

---

## üì± **Interface TP-Link Tether**

### **Configura√ß√£o via App:**
```yaml
Download:
  Android: TP-Link Tether (Google Play)
  iOS: TP-Link Tether (App Store)

Funcionalidades HomeGuard:
  ‚úÖ Monitorar sinal 4G em tempo real
  ‚úÖ Ver consumo de dados
  ‚úÖ Gerenciar port forwarding
  ‚úÖ Configurar QoS remotamente
  ‚úÖ Reiniciar modem √† dist√¢ncia
  ‚úÖ Receber notifica√ß√µes de status
```

---

## üéõÔ∏è **Configura√ß√µes Avan√ßadas**

### **1. Otimiza√ß√£o de Sinal:**
```yaml
Menu: Advanced ‚Üí Network ‚Üí Internet ‚Üí Advanced

Network Settings:
  Network Mode: 4G Only (para estabilidade)
  Band Selection: Auto (ou manual se necess√°rio)
  Roaming: Enable (se aplic√°vel)

Signal Optimization:
  ‚Ä¢ Posicionar antenas verticalmente
  ‚Ä¢ Evitar obst√°culos met√°licos
  ‚Ä¢ Considerar antena externa se sinal fraco
```

### **2. Configura√ß√£o de Rede Local:**
```yaml
Menu: Basic ‚Üí LAN

IP Address: 192.168.1.1 (padr√£o OK para HomeGuard)
Subnet Mask: 255.255.255.0
DHCP: Enable
  Start IP: 192.168.1.100
  End IP: 192.168.1.199
  Lease Time: 24 hours

Reserved Address: 
  Raspberry Pi MAC ‚Üí 192.168.1.100 (fixo)
```

### **3. WiFi Otimizado:**
```yaml
Menu: Basic ‚Üí Wireless

2.4GHz Settings:
  SSID: HomeGuard-Network
  Security: WPA2-PSK
  Password: [SENHA_FORTE_16+]
  Channel: Auto (ou 1, 6, 11 manual)
  Channel Width: 20MHz (mais est√°vel)
  Hidden Network: Enable (seguran√ßa extra)

Guest Network: Disable (n√£o necess√°rio)
```

---

## üíæ **Script de Configura√ß√£o Autom√°tica**

<function_calls>
<invoke name="create_file">
<parameter name="content">#!/bin/bash

# HomeGuard TL-MR100 Configuration Helper
# Automated configuration for TP-Link TL-MR100

echo "üéØ HomeGuard + TP-Link TL-MR100 Setup"
echo "====================================="

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Check if TL-MR100 is accessible
echo -e "${BLUE}üîç Detectando TP-Link TL-MR100...${NC}"

if ping -c 1 -W 3 192.168.1.1 &> /dev/null; then
    echo -e "${GREEN}‚úÖ TL-MR100 encontrado em 192.168.1.1${NC}"
else
    echo -e "${RED}‚ùå TL-MR100 n√£o encontrado${NC}"
    echo "   Verifique se:"
    echo "   ‚Ä¢ Modem est√° ligado"
    echo "   ‚Ä¢ Conectado via WiFi ou ethernet"
    echo "   ‚Ä¢ IP correto (192.168.1.1)"
    exit 1
fi

# Get Raspberry Pi IP
LOCAL_IP=$(hostname -I | awk '{print $1}')
echo -e "${GREEN}üè† Raspberry Pi IP: $LOCAL_IP${NC}"

# Check if IP is in correct range for TL-MR100
if [[ $LOCAL_IP == 192.168.1.* ]]; then
    echo -e "${GREEN}‚úÖ IP na faixa correta do TL-MR100${NC}"
    PI_IP=$LOCAL_IP
else
    echo -e "${YELLOW}‚ö†Ô∏è  Raspberry Pi n√£o est√° na rede do TL-MR100${NC}"
    echo "   Configure o Pi para receber IP autom√°tico do modem"
    read -p "   IP desejado para o Pi (ex: 192.168.1.100): " PI_IP
    
    if [ -z "$PI_IP" ]; then
        PI_IP="192.168.1.100"
    fi
fi

echo ""
echo -e "${BLUE}üìã Configura√ß√µes Necess√°rias no TL-MR100:${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo -e "${YELLOW}1. Acesse a interface web:${NC}"
echo "   ‚Ä¢ Abra: http://192.168.1.1"
echo "   ‚Ä¢ Login: admin / admin (primeira vez)"
echo "   ‚Ä¢ Defina nova senha segura"
echo ""

echo -e "${YELLOW}2. Configure o APN da operadora:${NC}"
echo "   Menu: Advanced ‚Üí Network ‚Üí Internet"
echo ""
echo "   Para Vivo:"
echo "   ‚Ä¢ APN: vivo.com.br"
echo "   ‚Ä¢ Username: vivo"
echo "   ‚Ä¢ Password: vivo"
echo ""
echo "   Para TIM:"
echo "   ‚Ä¢ APN: tim.br" 
echo "   ‚Ä¢ Username: tim"
echo "   ‚Ä¢ Password: tim"
echo ""

echo -e "${YELLOW}3. Port Forwarding HomeGuard:${NC}"
echo "   Menu: Advanced ‚Üí NAT Forwarding ‚Üí Port Forwarding"
echo ""
echo "   Service Name: HomeGuard-VPN"
echo "   External Port: 51820"
echo "   Internal IP: $PI_IP"
echo "   Internal Port: 51820"
echo "   Protocol: UDP"
echo "   Status: Enabled"
echo ""

echo -e "${YELLOW}4. Configurar Firewall:${NC}"
echo "   Menu: Advanced ‚Üí Security ‚Üí Firewall"
echo ""
echo "   ‚Ä¢ SPI Firewall: Enable"
echo "   ‚Ä¢ DoS Protection: Enable"
echo "   ‚Ä¢ VPN Passthrough: Enable"
echo ""

echo -e "${YELLOW}5. QoS (Opcional mas Recomendado):${NC}"
echo "   Menu: Advanced ‚Üí Advanced ‚Üí QoS"
echo ""
echo "   ‚Ä¢ Enable QoS"
echo "   ‚Ä¢ High Priority: Port 51820 UDP ($PI_IP)"
echo "   ‚Ä¢ High Priority: Port 1883 TCP ($PI_IP)"
echo ""

# Interactive configuration
echo -e "${CYAN}üí° Configura√ß√£o Interativa:${NC}"
read -p "Voc√™ j√° configurou o APN da operadora? (s/n): " APN_OK
read -p "Voc√™ j√° configurou o port forwarding (51820 UDP)? (s/n): " PORT_OK
read -p "Voc√™ j√° configurou o firewall? (s/n): " FIREWALL_OK

if [ "$APN_OK" != "s" ] || [ "$PORT_OK" != "s" ] || [ "$FIREWALL_OK" != "s" ]; then
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  Configure os itens pendentes no TL-MR100 antes de continuar${NC}"
    echo ""
    echo -e "${BLUE}üìö Consulte o guia detalhado:${NC}"
    echo "   cat TLMR100_HOMEGUARD_GUIDE.md"
    echo ""
    read -p "Pressione Enter quando a configura√ß√£o estiver completa..."
fi

# Test connectivity
echo ""
echo -e "${BLUE}üß™ Testando Conectividade...${NC}"

# Test internet via TL-MR100
if ping -c 2 8.8.8.8 &> /dev/null; then
    echo -e "${GREEN}‚úÖ Internet via TL-MR100: OK${NC}"
else
    echo -e "${RED}‚ùå Sem internet via TL-MR100${NC}"
    echo "   Verifique a configura√ß√£o APN"
fi

# Test local network
if ping -c 1 192.168.1.1 &> /dev/null; then
    echo -e "${GREEN}‚úÖ Rede local TL-MR100: OK${NC}"
else
    echo -e "${RED}‚ùå Problema na rede local${NC}"
fi

# Get external IP
echo -e "${CYAN}üåê Detectando IP Externo...${NC}"
EXTERNAL_IP=$(curl -s --connect-timeout 10 ifconfig.me)
if [ -n "$EXTERNAL_IP" ]; then
    echo -e "${GREEN}üåç IP Externo TL-MR100: $EXTERNAL_IP${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  IP externo n√£o detectado${NC}"
    EXTERNAL_IP="[IP_EXTERNO_TL-MR100]"
fi

# Configure Raspberry Pi network for TL-MR100
echo ""
echo -e "${BLUE}üîß Configurando Raspberry Pi para TL-MR100...${NC}"

# Check if Pi IP needs to be set
if [[ $LOCAL_IP != 192.168.1.* ]]; then
    echo "Configurando IP est√°tico para TL-MR100..."
    
    # Backup current network config
    sudo cp /etc/dhcpcd.conf /etc/dhcpcd.conf.backup
    
    # Add static IP configuration
    cat >> /tmp/tlmr100_network << EOF

# HomeGuard TL-MR100 Configuration
interface eth0
static ip_address=$PI_IP/24
static routers=192.168.1.1
static domain_name_servers=192.168.1.1 8.8.8.8

interface wlan0
static ip_address=$PI_IP/24
static routers=192.168.1.1
static domain_name_servers=192.168.1.1 8.8.8.8
EOF
    
    sudo tee -a /etc/dhcpcd.conf < /tmp/tlmr100_network > /dev/null
    echo -e "${GREEN}‚úÖ Configura√ß√£o de rede aplicada${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Reinicie o Raspberry Pi para aplicar: sudo reboot${NC}"
fi

# Update HomeGuard configs for new network
echo ""
echo -e "${BLUE}üìù Atualizando Configura√ß√µes HomeGuard...${NC}"

# Update MQTT broker IP in configs if needed
if [ -f "/home/pi/config.json" ]; then
    # Update for new network range if needed
    echo "‚úÖ Configura√ß√µes HomeGuard mantidas"
fi

# Final instructions
echo ""
echo -e "${GREEN}‚úÖ TL-MR100 Configurado para HomeGuard!${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "${BLUE}üì± Pr√≥ximos Passos:${NC}"
echo ""
echo "1. ${YELLOW}Instalar SIM card no TL-MR100${NC}"
echo "   ‚Ä¢ Desligar modem"
echo "   ‚Ä¢ Inserir MicroSIM"
echo "   ‚Ä¢ Ligar e aguardar conex√£o 4G"
echo ""
echo "2. ${YELLOW}Monitorar via TP-Link Tether app:${NC}"
echo "   ‚Ä¢ Baixar app TP-Link Tether"
echo "   ‚Ä¢ Conectar ao TL-MR100"
echo "   ‚Ä¢ Monitorar sinal e dados"
echo ""
echo "3. ${YELLOW}Configurar VPN:${NC}"
echo "   ‚Ä¢ Execute: ./setup_gsm_complete.sh"
echo "   ‚Ä¢ Ou configure manualmente WireGuard"
echo ""
echo "4. ${YELLOW}Testar acesso remoto:${NC}"
echo "   ‚Ä¢ Gerar cliente VPN"
echo "   ‚Ä¢ Testar fora da rede local"
echo "   ‚Ä¢ Verificar acesso HomeGuard"
echo ""

# Network info summary
echo -e "${CYAN}üìä Resumo da Rede:${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "TL-MR100 Gateway: 192.168.1.1"
echo "Raspberry Pi IP: $PI_IP"
echo "External IP: $EXTERNAL_IP"
echo "Port Forward: 51820 UDP ‚Üí $PI_IP:51820"
echo "MQTT Broker: $PI_IP:1883 (interno)"
echo ""

echo -e "${GREEN}üéâ TL-MR100 est√° pronto para o HomeGuard!${NC}"
echo -e "${CYAN}üåü Voc√™ ter√° conectividade 4G dedicada com controle total!${NC}"
